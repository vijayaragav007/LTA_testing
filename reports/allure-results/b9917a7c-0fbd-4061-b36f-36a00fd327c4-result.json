{"name": "test_book_a_gropu_lesson[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (647, 584)\n  (Session info: chrome=127.0.6533.99)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7E47D9642+30946]\n\t(No symbol) [0x00007FF7E478E3D9]\n\t(No symbol) [0x00007FF7E4686FDA]\n\t(No symbol) [0x00007FF7E46DFEEE]\n\t(No symbol) [0x00007FF7E46DD962]\n\t(No symbol) [0x00007FF7E46DAE7B]\n\t(No symbol) [0x00007FF7E46DA095]\n\t(No symbol) [0x00007FF7E46CC271]\n\t(No symbol) [0x00007FF7E46FCA6A]\n\t(No symbol) [0x00007FF7E46CBBB6]\n\t(No symbol) [0x00007FF7E46FCC80]\n\t(No symbol) [0x00007FF7E471B041]\n\t(No symbol) [0x00007FF7E46FC813]\n\t(No symbol) [0x00007FF7E46CA6E5]\n\t(No symbol) [0x00007FF7E46CB021]\n\tGetHandleVerifier [0x00007FF7E490F84D+1301229]\n\tGetHandleVerifier [0x00007FF7E491BDC7+1351783]\n\tGetHandleVerifier [0x00007FF7E4912A13+1313971]\n\tGetHandleVerifier [0x00007FF7E480DD16+245686]\n\t(No symbol) [0x00007FF7E479759F]\n\t(No symbol) [0x00007FF7E4793814]\n\t(No symbol) [0x00007FF7E47939A2]\n\t(No symbol) [0x00007FF7E478A3FF]\n\tBaseThreadInitThunk [0x00007FF9FDC07614+20]\n\tRtlUserThreadStart [0x00007FF9FED426B1+33]", "trace": "self = <tests.test_book_group_lesson.TestBookAGroup object at 0x0000029FB2E08690>\n\n    def test_book_a_gropu_lesson(self):\n        book_group_lesson = BookGroupLesson(self.driver)\n        book_group_lesson.lta_username(TestData.Username)\n        book_group_lesson.lta_password(TestData.Password)\n        book_group_lesson.click_lta_login()\n        book_group_lesson.Accept_all_cookies()\n        element = book_group_lesson.find_element(*book_group_lesson.locate.play)\n        book_group_lesson.hover_over_element(element)\n        book_group_lesson.play_module()\n        element = book_group_lesson.find_element(*book_group_lesson.locate.remove_location)\n        book_group_lesson.hover_over_element(element)\n        book_group_lesson.group_lesson_checkbox(\"Wimbledon, London, UK\")\n        book_group_lesson.group_lesson_dropdown()\n        book_group_lesson.find_a_court()\n>       book_group_lesson.Recurring()\n\ntests\\test_book_group_lesson.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\book_a_group_page.py:53: in Recurring\n    self.click(self.locate.recurring_session)\npages\\base_page.py:24: in click\n    self.find(*locator).click()\n..\\..\\LTA_FE_Testing\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\LTA_FE_Testing\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\LTA_FE_Testing\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000029FB3830290>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF7E478A3FF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF9FDC07614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF9FED426B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (647, 584)\nE         (Session info: chrome=127.0.6533.99)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7E47D9642+30946]\nE       \t(No symbol) [0x00007FF7E478E3D9]\nE       \t(No symbol) [0x00007FF7E4686FDA]\nE       \t(No symbol) [0x00007FF7E46DFEEE]\nE       \t(No symbol) [0x00007FF7E46DD962]\nE       \t(No symbol) [0x00007FF7E46DAE7B]\nE       \t(No symbol) [0x00007FF7E46DA095]\nE       \t(No symbol) [0x00007FF7E46CC271]\nE       \t(No symbol) [0x00007FF7E46FCA6A]\nE       \t(No symbol) [0x00007FF7E46CBBB6]\nE       \t(No symbol) [0x00007FF7E46FCC80]\nE       \t(No symbol) [0x00007FF7E471B041]\nE       \t(No symbol) [0x00007FF7E46FC813]\nE       \t(No symbol) [0x00007FF7E46CA6E5]\nE       \t(No symbol) [0x00007FF7E46CB021]\nE       \tGetHandleVerifier [0x00007FF7E490F84D+1301229]\nE       \tGetHandleVerifier [0x00007FF7E491BDC7+1351783]\nE       \tGetHandleVerifier [0x00007FF7E4912A13+1313971]\nE       \tGetHandleVerifier [0x00007FF7E480DD16+245686]\nE       \t(No symbol) [0x00007FF7E479759F]\nE       \t(No symbol) [0x00007FF7E4793814]\nE       \t(No symbol) [0x00007FF7E47939A2]\nE       \t(No symbol) [0x00007FF7E478A3FF]\nE       \tBaseThreadInitThunk [0x00007FF9FDC07614+20]\nE       \tRtlUserThreadStart [0x00007FF9FED426B1+33]\n\n..\\..\\LTA_FE_Testing\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "stdout", "source": "c862504d-c396-4902-8429-d6db434eb302-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "initialize_driver", "value": "'chrome'"}], "start": 1724136122686, "stop": 1724136178984, "uuid": "1d013104-19bc-47ad-8120-04cd358f6551", "historyId": "80d7fc04fef4f91b5dd8982d94dbd81f", "testCaseId": "54ec61cae3ba1908d8e8de48245cbbe0", "fullName": "tests.test_book_group_lesson.TestBookAGroup#test_book_a_gropu_lesson", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('initialize_driver')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_book_group_lesson"}, {"name": "subSuite", "value": "TestBookAGroup"}, {"name": "host", "value": "VEROLTBLRLT354"}, {"name": "thread", "value": "24084-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_book_group_lesson"}]}